Composite: É um padrão de projeto estrutural que permite que você componha objetos em estruturas de árvores e então trabalhe com essas estruturas como se elas fossem objetos individuais.



- Problema: Ao lidar com uma estrutura de objetos que pode ser representada como uma árvore, pode ser desafiador tratar elementos simples e compostos de forma uniforme. Além disso, a necessidade de adicionar novos tipos de elementos à estrutura sem quebrar o código existente pode ser um desafio.



- Solução: O padrão Composite resolve esse problema permitindo a composição de objetos em estruturas de árvores. Ele fornece dois tipos básicos de elementos: folhas simples e contêineres complexos. Tanto folhas quanto contêineres compartilham uma interface comum, permitindo que o código cliente trate ambos de maneira uniforme. Isso facilita a construção de estruturas de objetos recursivas aninhadas, sem que o cliente precise se preocupar com a classe concreta dos objetos.



- Quando usar:  
	+ Utilize o padrão Composite quando você tem que implementar uma estrutura de objetos tipo árvore.
	+ O padrão Composite fornece a você com dois tipos básicos de elementos que compartilham uma interface comum: folhas simples e contêineres complexos. Um contêiner pode ser composto tanto de folhas como por outros contêineres. Isso permite a você construir uma estrutura de objetos recursiva aninhada que se assemelha a uma árvore.
	+ Utilize o padrão quando você quer que o código cliente trate tanto os objetos simples como os compostos de forma uniforme.
	+ Todos os elementos definidos pelo padrão Composite compartilham uma interface comum. Usando essa interface o cliente não precisa se preocupar com a classe concreta dos objetos com os quais está trabalhando.
	
	
	
- Implementação:
	+ Certifique-se que o modelo central de sua aplicação possa ser representada como uma estrutura de árvore. Tente quebrá-lo em elementos simples e contêineres. Lembre-se que contêineres devem ser capazes de conter tanto elementos simples como outros contêineres.
	+ Declare a interface componente com uma lista de métodos que façam sentido para componentes complexos e simples.
	+ Crie uma classe folha que represente elementos simples. Um programa pode ter múltiplas classes folha diferentes.
	+ Crie uma classe contêiner para representar elementos complexos. Nessa classe crie um vetor para armazenar referências aos sub-elementos. O vetor deve ser capaz de armazenar tanto folhas como contêineres, então certifique-se que ele foi declarado com um tipo de interface componente.
	+ Quando implementar os métodos para a interface componente, lembre-se que um contêiner deve ser capaz de delegar a maior parte do trabalho para os sub-elementos.
	+ Por fim, defina os métodos para adicionar e remover os elementos filhos no contêiner.
	+ Tenha em mente que essas operações podem ser declaradas dentro da interface componente. Isso violaria o princípio de segregação de interface porque os métodos estarão vazios na classe folha. Contudo, o cliente será capaz de tratar de todos os elementos de forma igual, mesmo ao montar a árvore.



- Vantagens:
	+ Você pode trabalhar com estruturas de árvore complexas mais convenientemente: utilize o polimorfismo e a recursão a seu favor.
	+ Princípio aberto/fechado. Você pode introduzir novos tipos de elemento na aplicação sem quebrar o código existente, o que agora funciona com a árvore de objetos



- Desvantagens:
	+  Pode ser difícil providenciar uma interface comum para classes cuja funcionalidade difere muito. Em certos cenários, você precisaria generalizar muito a interface componente, fazendo dela uma interface de difícil compreensão.


