Singleton: É um padrão de projeto criacional que permite a você garantir que uma classe tenha apenas uma instância, enquanto provê um ponto de acesso global para essa instância.


- Problema: Quando uma classe em seu programa deve ter apenas uma instância disponível para todos os seus clientes, você pode enfrentar desafios como garantir que somente uma instância seja criada, fornecer um ponto de acesso global para essa instância e controlar estritamente as variáveis globais. Além disso, a implementação inadequada do padrão Singleton pode levar a uma violação do princípio de responsabilidade única e mascarar um design ruim no programa. Questões relacionadas a ambientes multithreaded também podem surgir, exigindo tratamento especial.



- Solução: O padrão Singleton resolve esses problemas garantindo que uma classe tenha apenas uma instância, proporcionando um ponto de acesso global para essa instância. Isso é útil quando você precisa de controle estrito sobre variáveis globais e deseja evitar a criação de múltiplas instâncias de uma classe. A implementação do Singleton envolve a criação de um campo privado estático para armazenar a instância, um método de criação público estático que fornece o ponto de acesso global e a aplicação de "inicialização preguiçosa" para criar a instância apenas quando solicitada pela primeira vez.



- Quando usar:  
	+ Utilize o padrão Singleton quando uma classe em seu programa deve ter apenas uma instância disponível para todos seus clientes; por exemplo, um objeto de base de dados único compartilhado por diferentes partes do programa.
	+ O padrão Singleton desabilita todos os outros meios de criar objetos de uma classe exceto pelo método especial de criação. Esse método tanto cria um novo objeto ou retorna um objeto existente se ele já tenha sido criado.
	+ Utilize o padrão Singleton quando você precisa de um controle mais estrito sobre as variáveis globais.
	+ Ao contrário das variáveis globais, o padrão Singleton garante que há apenas uma instância de uma classe. Nada, a não ser a própria classe singleton, pode substituir a instância salva em cache.
	+ Observe que você sempre pode ajustar essa limitação e permitir a criação de qualquer número de instâncias singleton. O único pedaço de código que requer mudanças é o corpo do método getInstance.



- Implementação: 
	+ Adicione um campo privado estático na classe para o armazenamento da instância singleton.
	+ Declare um método de criação público estático para obter a instância singleton.
	+ Implemente a “inicialização preguiçosa” dentro do método estático. Ela deve criar um novo objeto na sua primeira chamada e colocá-lo no campo estático. O método deve sempre retornar aquela instância em todas as chamadas subsequentes.
	+ Faça o construtor da classe ser privado. O método estático da classe vai ainda ser capaz de chamar o construtor, mas não os demais objetos.
	+ Vá para o código cliente e substitua todas as chamadas diretas para o construtor do singleton com chamadas para seu método de criação estático.



- Vantagens:
	+ Você pode ter certeza que uma classe só terá uma única instância.
	+ Você ganha um ponto de acesso global para aquela instância.
	+ O objeto singleton é inicializado somente quando for pedido pela primeira vez.



- Desvantagens:
	+ Viola o princípio de responsabilidade única. O padrão resolve dois problemas de uma só vez.
	+ O padrão Singleton pode mascarar um design ruim, por exemplo, quando os componentes do programa sabem muito sobre cada um.
	+ O padrão requer tratamento especial em um ambiente multithreaded para que múltiplas threads não possam criar um objeto singleton várias vezes.
	+ Pode ser difícil realizar testes unitários do código cliente do Singleton porque muitos frameworks de teste dependem de herança quando produzem objetos simulados. Já que o construtor da classe singleton é privado e sobrescrever métodos estáticos é impossível na maioria das linguagem, você terá que pensar em uma maneira criativa de simular o singleton. Ou apenas não escreva os testes. Ou não use o padrão Singleton.

	