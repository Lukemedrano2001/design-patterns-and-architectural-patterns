Factory Method: É um padrão criacional de projeto que fornece uma interface para criar objetos em uma superclasse, mas permite que as subclasses alterem o tipo de objetos que serão criados. 



- Problema: Quando precisamos criar objetos em uma hierarquia de classes, mas não conhecemos antecipadamente os tipos ou as dependências exatas desses objetos, enfrentamos um desafio. O código cliente pode ser fortemente acoplado às classes concretas, resultando em inflexibilidade e dificuldade de extensão. Além disso, alterar o tipo de objetos a serem criados pode exigir modificações significativas no código existente.



- Solução: O padrão Factory Method resolve esse problema fornecendo uma interface para criar objetos em uma superclasse, mas permite que as subclasses alterem o tipo de objetos que serão criados. Isso separa o código de construção do produto do código que realmente utiliza o produto, facilitando a extensão e manutenção do código. A criação do produto é delegada às subclasses, permitindo que novos tipos de produtos sejam adicionados sem modificar o código cliente existente.



- Quando usar: 
	+ Use o Factory Method quando não souber de antemão os tipos e dependências exatas dos objetos com os quais seu código deve funcionar.
	+ O Factory Method separa o código de construção do produto do código que realmente usa o produto. Portanto, é mais fácil estender o código de construção do produto independentemente do restante do código.
	+ Por exemplo, para adicionar um novo tipo de produto à aplicação, só será necessário criar uma nova subclasse criadora e substituir o método fábrica nela.
	+ Use o Factory Method quando desejar fornecer aos usuários da sua biblioteca ou framework uma maneira de estender seus componentes internos.



- Implementação: 
	+ Faça todos os produtos implementarem a mesma interface. Essa interface deve declarar métodos que fazem sentido em todos os produtos.
	+ Adicione um método fábrica vazio dentro da classe criadora. O tipo de retorno do método deve corresponder à interface comum do produto.
	+ No código da classe criadora, encontre todas as referências aos construtores de produtos. Um por um, substitua-os por chamadas ao método fábrica, enquanto extrai o código de criação do produto para o método fábrica.
	+ Pode ser necessário adicionar um parâmetro temporário ao método fábrica para controlar o tipo de produto retornado.
	+ Neste ponto, o código do método fábrica pode parecer bastante feio. Pode ter um grande operador switch que escolhe qual classe de produto instanciar. Mas não se preocupe, resolveremos isso em breve.
	+ Agora, crie um conjunto de subclasses criadoras para cada tipo de produto listado no método fábrica. Sobrescreva o método fábrica nas subclasses e extraia os pedaços apropriados do código de construção do método base.
	+ Se houver muitos tipos de produtos e não fizer sentido criar subclasses para todos eles, você poderá reutilizar o parâmetro de controle da classe base nas subclasses.



- Vantagens:
	+ Você evita acoplamentos firmes entre o criador e os produtos concretos.
	+ Princípio de responsabilidade única. Você pode mover o código de criação do produto para um único local do programa, facilitando a manutenção do código.
	+ Princípio aberto/fechado. Você pode introduzir novos tipos de produtos no programa sem quebrar o código cliente existente.



- Desvantagens:
	+ O código pode se tornar mais complicado, pois você precisa introduzir muitas subclasses novas para implementar o padrão. O melhor cenário é quando você está introduzindo o padrão em uma hierarquia existente de classes criadoras.
	
	