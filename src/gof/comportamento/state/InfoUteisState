State: É um padrão de projeto comportamental que permite que um objeto altere seu comportamento quando seu estado interno muda. Parece como se o objeto mudasse de classe.


- Problema: Quando um objeto precisa alterar seu comportamento dependendo de seu estado interno, e esse número de estados é grande ou o código específico do estado muda frequentemente. Também, quando há uma classe com condicionais extensas que alteram o comportamento da classe com base em valores atuais de seus campos.



- Solução: O padrão State permite que um objeto mude seu comportamento quando seu estado interno muda. Isso é alcançado através da extração de código específico do estado para classes distintas, permitindo adição de novos estados ou mudança nos existentes independentemente uns dos outros.



- Quando usar:  
	+ Utilize o padrão State quando você tem um objeto que se comporta de maneira diferente dependendo do seu estado atual, quando o número de estados é enorme, e quando o código estado específico muda com frequência. O padrão sugere que você extraia todo o código estado específico para um conjunto de classes distintas. Como resultado, você pode adicionar novos estados ou mudar os existentes independentemente uns dos outros, reduzindo o custo da manutenção.
	+ Utilize o padrão quando você tem uma classe populada com condicionais gigantes que alteram como a classe se comporta de acordo com os valores atuais dos campos da classe. O padrão State permite que você extraia ramificações dessas condicionais para dentro de métodos de classes correspondentes. Ao fazer isso, você também limpa para fora da classe principal os campos temporários e os métodos auxiliares envolvidos no código estado específico.
	+ Utilize o State quando você tem muito código duplicado em muitos estados parecidos e transições de uma máquina de estado baseada em condições. O padrão State permite que você componha hierarquias de classes estado e reduza a duplicação ao extrair código comum para dentro de classes abstratas base.


	
- Implementação:
	+ Decida qual classe vai agir como contexto. Poderia ser uma classe existente que já tenha código dependente do estado; ou uma nova classe, se o código específico ao estado estiver distribuído em múltiplas classes.
	+ Declare a interface do estado. Embora ela vai espelhar todos os métodos declarados no contexto, mire apenas para aqueles que possam conter comportamento específico ao estado.
	+ Para cada estado real, crie uma classe que deriva da interface do estado. Então vá para os métodos do contexto e extraia todo o código relacionado a aquele estado para dentro de sua nova classe.
		1-) Ao mover o código para a classe estado, você pode descobrir que ela depende de membros privados do contexto. Há várias maneiras de contornar isso:
			* Torne esses campos ou métodos públicos.
			* Transforme o comportamento que você está extraindo para um método público dentro do contexto e chame-o na classe estado. Essa maneira é feia mas rápida, e você pode sempre consertá-la mais tarde.
			* Aninhe as classes estado dentro da classe contexto, mas apenas se sua linguagem de programação suporta classes aninhadas.
			* Na classe contexto, adicione um campo de referência do tipo de interface do estado e um setter público que permite sobrescrever o valor daquele campo.
	+ Vá até o método do contexto novamente e substitua as condicionais de estado vazias por chamadas aos métodos correspondentes do objeto estado.
	+ Para trocar o estado do contexto, crie uma instância de uma das classes estado e a passe para o contexto. Você pode fazer isso dentro do próprio contexto, ou em vários estados, ou no cliente. Aonde quer que isso seja feito, a classe se torna dependente da classe estado concreta que ela instanciou.



- Vantagens:
	+ Princípio de responsabilidade única. Organiza o código relacionado a estados particulares em classes separadas.
	+ Princípio aberto/fechado. Introduz novos estados sem mudar classes de estado ou contexto existentes.
	+ Simplifica o código de contexto ao eliminar condicionais de máquinas de estado pesadas.



- Desvantagens:
	+ Aplicar o padrão pode ser um exagero se a máquina de estado só tem alguns estados ou raramente muda eles.


