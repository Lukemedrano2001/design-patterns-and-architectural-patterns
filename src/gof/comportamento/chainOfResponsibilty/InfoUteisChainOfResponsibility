Chain of Responsibility: É um padrão de projeto comportamental que permite que você passe pedidos por uma corrente de handlers. Ao receber um pedido, cada handler decide se processa o pedido ou o passa adiante para o próximo handler na corrente.


- Problema: Quando um programa precisa processar diferentes tipos de pedidos de maneiras variadas, mas não se conhece antecipadamente os tipos exatos de pedidos e suas sequências.



- Solução: O padrão Chain of Responsibility resolve esse problema criando uma corrente de handlers. Cada handler, ao receber um pedido, decide se o processa ou o passa para o próximo handler na corrente. Isso permite que diferentes handlers processem pedidos de maneiras específicas e em uma ordem determinada.



- Quando usar:  
	+ Utilize o padrão Chain of Responsibility quando é esperado que seu programa processe diferentes tipos de pedidos em várias maneiras, mas os exatos tipos de pedidos e suas sequências são desconhecidos de antemão. O padrão permite que você ligue vários handlers em uma corrente e, ao receber um pedido, perguntar para cada handler se ele pode ou não processá-lo. Dessa forma todos os handlers tem a chance de processar o pedido.
	+ Utilize o padrão quando é essencial executar diversos handlers em uma ordem específica. Já que você pode ligar os handlers em uma corrente em qualquer ordem, todos os pedidos irão atravessar a corrente exatamente como você planejou.
	+ Utilize o padrão CoR quando o conjunto de handlers e suas encomendas devem mudar no momento de execução. Se você providenciar setters para um campo de referência dentro das classes handler, você será capaz de inserir, remover, ou reordenar os handlers de forma dinâmica.
	
	
	
- Implementação:
	+ Declare a interface do handler e descreva a assinatura de um método para lidar com pedidos.
	+ Decida como o cliente irá passar os dados do pedido para o método. A maneira mais flexível é converter o pedido em um objeto e passá-lo para o método handler como um argumento.
	+ Para eliminar código padrão duplicado nos handlers concretos, pode valer a pena criar uma classe handler base abstrata, derivada da interface do handler.
	+ Essa classe deve ter um campo para armazenar uma referência ao próximo handler na corrente. Considere tornar a classe imutável. Contudo, se você planeja modificar correntes no tempo de execução, você precisa definir um setter para alterar o valor do campo de referência.
	+ Você também pode implementar o comportamento padrão conveniente para o método handler, que vai passar adiante o pedido para o próximo objeto a não ser que não haja mais objetos. Handlers concretos irão ser capazes de usar esse comportamento ao chamar o método pai.
	+ Um por um crie subclasses handler concretas e implemente seus métodos handler. Cada handler deve fazer duas decisões ao receber um pedido:
		1-) Se ele vai processar o pedido.
		2-) Se ele vai passar o pedido adiante na corrente.
	+ O cliente pode tanto montar correntes sozinho ou receber correntes pré construídas de outros objetos. Neste último caso, você deve implementar algumas classes fábrica para construir correntes de acordo com a configuração ou definições de ambiente.
	+ O cliente pode ativar qualquer handler da corrente, não apenas o primeiro. O pedido será passado ao longo da corrente até que algum handler se recuse a passá-lo adiante ou até ele chegar ao fim da corrente.
	+ Devido a natureza dinâmica da corrente, o cliente deve estar pronto para lidar com os seguintes cenários:
		1-) A corrente pode consistir de um único elo.
		2-) Alguns pedidos podem não chegar ao fim da corrente.
		3-) Outros podem chegar ao fim da corrente sem terem sido tratados.



- Vantagens:
	+ Você pode controlar a ordem de tratamento dos pedidos.
	+ Princípio de responsabilidade única. Você pode desacoplar classes que invocam operações de classes que realizam operações.
	+ Princípio aberto/fechado. Você pode introduzir novos handlers na aplicação sem quebrar o código cliente existente.


- Desvantagens:
	+ Alguns pedidos podem acabar sem tratamento.

